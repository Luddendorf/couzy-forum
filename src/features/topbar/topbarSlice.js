import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { sendSelectedMenuItem } from './topbarAPI';

const initialState = {
  selectedMenuItem: 'topbar-browse',
  selectedSubmenuItem: 'topbar-topics'
};

export const setSelectedMenuItemAsync = createAsyncThunk(
  'topbar/sendSelectedMenuItem',
  async (selectedMenuItem) => {
    const response = await sendSelectedMenuItem(selectedMenuItem);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const topbarSlice = createSlice({
  name: 'topbar',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
    setActiveTopbarItem: (state, action) => {
      return { ...state, selectedMenuItem: action.payload };
    },
    setActiveSubmenuItem: (state, action) => {
      return { ...state, selectedSubmenuItem: action.payload };
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  /* extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },  */
});

export const { setActiveTopbarItem, setActiveSubmenuItem } = topbarSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectActiveMenuItem = (state) => state.topbar.selectedMenuItem;

export const selectActiveSubMenuItem = (state) => state.topbar.selectedSubmenuItem;

// export const giveActiveMenuItem = () => (getState) => {
//   const currentMenuItemName = selectActiveMenuItem(getState());
//   return currentMenuItemName;
// }

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  } 
}; */

export default topbarSlice.reducer;